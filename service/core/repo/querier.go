// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package core_repo

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	// -------------------------- ADD CORE_TABLES <-> CORE_TABLES --------------------------
	AddCoreTable(ctx context.Context, arg AddCoreTableParams) (CoreTable, error)
	// ------------------------------ ADD ONE CORE_USERS <-> CORE_USER  ------------------------------
	AddCoreUser(ctx context.Context, arg AddCoreUserParams) (CoreUser, error)
	// -------------------------- ADD ONE TO -> CORE_SESSIONS --------------------------
	AddSession(ctx context.Context, arg AddSessionParams) (CoreSession, error)
	GetCoreTableWithName(ctx context.Context, tablename string) (CoreTable, error)
	// -------------------------- GET ONE CORE_TABLES <- CORE_TABLES --------------------------
	GetCoreTableWithTid(ctx context.Context, tid int64) (CoreTable, error)
	GetCoreTableWithTidAndUid(ctx context.Context, arg GetCoreTableWithTidAndUidParams) (CoreTable, error)
	GetCoreUserWithEmail(ctx context.Context, email string) (CoreUser, error)
	// ------------------------------ GET ONE CORE_USERS <== CORE_USER  ------------------------------
	GetCoreUserWithUid(ctx context.Context, uid int64) (CoreUser, error)
	GetCoreUserWithUsername(ctx context.Context, username string) (CoreUser, error)
	// -------------------------- GET ONE FROM <- CORE_SESSIONS --------------------------
	GetSession(ctx context.Context, sid uuid.UUID) (CoreSession, error)
	// ------------------------------ GET MULTIPLE CORE_TABLES <== [CORE_TABLES] ------------------------------
	ListCoreTables(ctx context.Context) ([]CoreTable, error)
	ListCoreTablesWithLimit(ctx context.Context, limit int32) ([]CoreTable, error)
	ListCoreTablesWithLimitOffset(ctx context.Context, arg ListCoreTablesWithLimitOffsetParams) ([]CoreTable, error)
	// --------------------- GET MULTIPLE CORE_TABLES OF CORE_USERS.UID <== [CORE_TABLES] ---------------------
	ListCoreTablesWithUid(ctx context.Context, uid int64) ([]CoreTable, error)
	ListCoreTablesWithUidWithLimit(ctx context.Context, arg ListCoreTablesWithUidWithLimitParams) ([]CoreTable, error)
	ListCoreTablesWithUidWithLimitOffset(ctx context.Context, arg ListCoreTablesWithUidWithLimitOffsetParams) ([]CoreTable, error)
	// ------------------------------ GET MULTIPLE CORE_USERS <== [CORE_USERS] ------------------------------
	ListCoreUsers(ctx context.Context) ([]CoreUser, error)
	ListCoreUsersWithLimit(ctx context.Context, limit int32) ([]CoreUser, error)
	ListCoreUsersWithLimitOffset(ctx context.Context, arg ListCoreUsersWithLimitOffsetParams) ([]CoreUser, error)
	RemoveCoreTableWithUidAndName(ctx context.Context, arg RemoveCoreTableWithUidAndNameParams) error
	// -------------------------- REMOVE CORE_TABLES <-> CORE_TABLES --------------------------
	RemoveCoreTableWithUidAndTid(ctx context.Context, arg RemoveCoreTableWithUidAndTidParams) error
	RemoveCoreUserWithEmail(ctx context.Context, email string) error
	// ------------------------------ REMOVE ONE CORE_USERS -> nil  ------------------------------
	RemoveCoreUserWithUid(ctx context.Context, uid int64) error
	RemoveCoreUserWithUsername(ctx context.Context, username string) error
	UpdateCoreUserBlocked(ctx context.Context, arg UpdateCoreUserBlockedParams) (CoreUser, error)
	// ------------------------------ UPDATE ONE CORE_USERS <-> CORE_USERS  ------------------------------
	UpdateCoreUserName(ctx context.Context, arg UpdateCoreUserNameParams) (CoreUser, error)
	UpdateCoreUserPassword(ctx context.Context, arg UpdateCoreUserPasswordParams) (CoreUser, error)
	UpdateCoreUserPublic(ctx context.Context, arg UpdateCoreUserPublicParams) (CoreUser, error)
	UpdateCoreUserUsername(ctx context.Context, arg UpdateCoreUserUsernameParams) (CoreUser, error)
	UpdateCoreUserVerified(ctx context.Context, arg UpdateCoreUserVerifiedParams) (CoreUser, error)
}

var _ Querier = (*Queries)(nil)
