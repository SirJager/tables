// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: gen_core_tables.sql

package core_repo

import (
	"context"
)

const addCoreTable = `-- name: AddCoreTable :one

INSERT INTO "public"."core_tables" (name,user_id,columns) VALUES ($1, $2, $3) RETURNING id, user_id, name, columns, created, updated
`

type AddCoreTableParams struct {
	Name    string `json:"name"`
	UserID  int64  `json:"user_id"`
	Columns string `json:"columns"`
}

// -------------------------- ADD CORE_TABLES <-> CORE_TABLES --------------------------
func (q *Queries) AddCoreTable(ctx context.Context, arg AddCoreTableParams) (CoreTable, error) {
	row := q.db.QueryRowContext(ctx, addCoreTable, arg.Name, arg.UserID, arg.Columns)
	var i CoreTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Columns,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getCoreTableWithName = `-- name: GetCoreTableWithName :one
SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCoreTableWithName(ctx context.Context, name string) (CoreTable, error) {
	row := q.db.QueryRowContext(ctx, getCoreTableWithName, name)
	var i CoreTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Columns,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getCoreTableWithTid = `-- name: GetCoreTableWithTid :one

SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" WHERE id = $1 LIMIT 1
`

// -------------------------- GET ONE CORE_TABLES <- CORE_TABLES --------------------------
func (q *Queries) GetCoreTableWithTid(ctx context.Context, id int64) (CoreTable, error) {
	row := q.db.QueryRowContext(ctx, getCoreTableWithTid, id)
	var i CoreTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Columns,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getCoreTableWithTidAndUid = `-- name: GetCoreTableWithTidAndUid :one
SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" WHERE id = $1 AND user_id = $2 LIMIT 1
`

type GetCoreTableWithTidAndUidParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetCoreTableWithTidAndUid(ctx context.Context, arg GetCoreTableWithTidAndUidParams) (CoreTable, error) {
	row := q.db.QueryRowContext(ctx, getCoreTableWithTidAndUid, arg.ID, arg.UserID)
	var i CoreTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Columns,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listCoreTables = `-- name: ListCoreTables :many

SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables"
`

// ------------------------------ GET MULTIPLE CORE_TABLES <== [CORE_TABLES] ------------------------------
func (q *Queries) ListCoreTables(ctx context.Context) ([]CoreTable, error) {
	rows, err := q.db.QueryContext(ctx, listCoreTables)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTable{}
	for rows.Next() {
		var i CoreTable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Columns,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCoreTablesWithLimit = `-- name: ListCoreTablesWithLimit :many
SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" LIMIT $1::int
`

func (q *Queries) ListCoreTablesWithLimit(ctx context.Context, limit int32) ([]CoreTable, error) {
	rows, err := q.db.QueryContext(ctx, listCoreTablesWithLimit, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTable{}
	for rows.Next() {
		var i CoreTable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Columns,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCoreTablesWithLimitOffset = `-- name: ListCoreTablesWithLimitOffset :many
SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" LIMIT $2::int OFFSET $1::int
`

type ListCoreTablesWithLimitOffsetParams struct {
	Offset int32 `json:"offset_"`
	Limit  int32 `json:"limit_"`
}

func (q *Queries) ListCoreTablesWithLimitOffset(ctx context.Context, arg ListCoreTablesWithLimitOffsetParams) ([]CoreTable, error) {
	rows, err := q.db.QueryContext(ctx, listCoreTablesWithLimitOffset, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTable{}
	for rows.Next() {
		var i CoreTable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Columns,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCoreTablesWithUid = `-- name: ListCoreTablesWithUid :many

SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" WHERE user_id = $1
`

// --------------------- GET MULTIPLE CORE_TABLES OF CORE_USERS.user_id <== [CORE_TABLES] ---------------------
func (q *Queries) ListCoreTablesWithUid(ctx context.Context, userID int64) ([]CoreTable, error) {
	rows, err := q.db.QueryContext(ctx, listCoreTablesWithUid, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTable{}
	for rows.Next() {
		var i CoreTable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Columns,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCoreTablesWithUidWithLimit = `-- name: ListCoreTablesWithUidWithLimit :many
SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" WHERE user_id = $1 LIMIT $2::int
`

type ListCoreTablesWithUidWithLimitParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit_"`
}

func (q *Queries) ListCoreTablesWithUidWithLimit(ctx context.Context, arg ListCoreTablesWithUidWithLimitParams) ([]CoreTable, error) {
	rows, err := q.db.QueryContext(ctx, listCoreTablesWithUidWithLimit, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTable{}
	for rows.Next() {
		var i CoreTable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Columns,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCoreTablesWithUidWithLimitOffset = `-- name: ListCoreTablesWithUidWithLimitOffset :many
SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" WHERE user_id = $1 LIMIT $3::int OFFSET $2::int
`

type ListCoreTablesWithUidWithLimitOffsetParams struct {
	UserID int64 `json:"user_id"`
	Offset int32 `json:"offset_"`
	Limit  int32 `json:"limit_"`
}

func (q *Queries) ListCoreTablesWithUidWithLimitOffset(ctx context.Context, arg ListCoreTablesWithUidWithLimitOffsetParams) ([]CoreTable, error) {
	rows, err := q.db.QueryContext(ctx, listCoreTablesWithUidWithLimitOffset, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTable{}
	for rows.Next() {
		var i CoreTable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Columns,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCoreTableWithUidAndName = `-- name: RemoveCoreTableWithUidAndName :exec
DELETE FROM "public"."core_tables" WHERE user_id = $1 AND name = $2
`

type RemoveCoreTableWithUidAndNameParams struct {
	UserID int64  `json:"user_id"`
	Name   string `json:"name"`
}

func (q *Queries) RemoveCoreTableWithUidAndName(ctx context.Context, arg RemoveCoreTableWithUidAndNameParams) error {
	_, err := q.db.ExecContext(ctx, removeCoreTableWithUidAndName, arg.UserID, arg.Name)
	return err
}

const removeCoreTableWithUidAndTid = `-- name: RemoveCoreTableWithUidAndTid :exec

DELETE FROM "public"."core_tables" WHERE user_id = $1 AND id = $2
`

type RemoveCoreTableWithUidAndTidParams struct {
	UserID int64 `json:"user_id"`
	ID     int64 `json:"id"`
}

// -------------------------- REMOVE CORE_TABLES <-> CORE_TABLES --------------------------
func (q *Queries) RemoveCoreTableWithUidAndTid(ctx context.Context, arg RemoveCoreTableWithUidAndTidParams) error {
	_, err := q.db.ExecContext(ctx, removeCoreTableWithUidAndTid, arg.UserID, arg.ID)
	return err
}
