// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: tables_gen.sql

package core_repo

import (
	"context"
)

const createTable = `-- name: CreateTable :one

INSERT INTO "public"."core_tables" (name,user_id,columns) VALUES ($1, $2, $3) RETURNING id, user_id, name, columns, created, updated
`

type CreateTableParams struct {
	Name    string `json:"name"`
	UserID  int64  `json:"user_id"`
	Columns string `json:"columns"`
}

// -------------------------- ADD CORE_TABLES <-> CORE_TABLES --------------------------
func (q *Queries) CreateTable(ctx context.Context, arg CreateTableParams) (CoreTable, error) {
	row := q.db.QueryRowContext(ctx, createTable, arg.Name, arg.UserID, arg.Columns)
	var i CoreTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Columns,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteTable = `-- name: DeleteTable :exec

DELETE FROM "public"."core_tables" WHERE id = $1
`

// -------------------------- REMOVE CORE_TABLES <-> CORE_TABLES --------------------------
func (q *Queries) DeleteTable(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTable, id)
	return err
}

const deleteTableWhereUserAndName = `-- name: DeleteTableWhereUserAndName :exec
DELETE FROM "public"."core_tables" WHERE user_id = $1 AND name = $2
`

type DeleteTableWhereUserAndNameParams struct {
	UserID int64  `json:"user_id"`
	Name   string `json:"name"`
}

func (q *Queries) DeleteTableWhereUserAndName(ctx context.Context, arg DeleteTableWhereUserAndNameParams) error {
	_, err := q.db.ExecContext(ctx, deleteTableWhereUserAndName, arg.UserID, arg.Name)
	return err
}

const deleteTablesWhereUser = `-- name: DeleteTablesWhereUser :exec
DELETE FROM "public"."core_tables" WHERE user_id = $1
`

func (q *Queries) DeleteTablesWhereUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTablesWhereUser, userID)
	return err
}

const getAllTables = `-- name: GetAllTables :many

SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables"
`

// ------------------------------ GET MULTIPLE CORE_TABLES <== [CORE_TABLES] ------------------------------
func (q *Queries) GetAllTables(ctx context.Context) ([]CoreTable, error) {
	rows, err := q.db.QueryContext(ctx, getAllTables)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTable{}
	for rows.Next() {
		var i CoreTable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Columns,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSomeTables = `-- name: GetSomeTables :many
SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" LIMIT $2::int OFFSET $1::int
`

type GetSomeTablesParams struct {
	Offset int32 `json:"offset_"`
	Limit  int32 `json:"limit_"`
}

func (q *Queries) GetSomeTables(ctx context.Context, arg GetSomeTablesParams) ([]CoreTable, error) {
	rows, err := q.db.QueryContext(ctx, getSomeTables, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTable{}
	for rows.Next() {
		var i CoreTable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Columns,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSomeTablesWhereUser = `-- name: GetSomeTablesWhereUser :many
SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" WHERE user_id = $1 LIMIT $3::int OFFSET $2::int
`

type GetSomeTablesWhereUserParams struct {
	UserID int64 `json:"user_id"`
	Offset int32 `json:"offset_"`
	Limit  int32 `json:"limit_"`
}

func (q *Queries) GetSomeTablesWhereUser(ctx context.Context, arg GetSomeTablesWhereUserParams) ([]CoreTable, error) {
	rows, err := q.db.QueryContext(ctx, getSomeTablesWhereUser, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTable{}
	for rows.Next() {
		var i CoreTable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Columns,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTable = `-- name: GetTable :one

SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" WHERE id = $1 LIMIT 1
`

// -------------------------- GET ONE CORE_TABLES <- CORE_TABLES --------------------------
func (q *Queries) GetTable(ctx context.Context, id int64) (CoreTable, error) {
	row := q.db.QueryRowContext(ctx, getTable, id)
	var i CoreTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Columns,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getTableWhereIDAndUser = `-- name: GetTableWhereIDAndUser :one
SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" WHERE id = $1 AND user_id = $2 LIMIT 1
`

type GetTableWhereIDAndUserParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetTableWhereIDAndUser(ctx context.Context, arg GetTableWhereIDAndUserParams) (CoreTable, error) {
	row := q.db.QueryRowContext(ctx, getTableWhereIDAndUser, arg.ID, arg.UserID)
	var i CoreTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Columns,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getTableWhereName = `-- name: GetTableWhereName :one
SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" WHERE name = $1 LIMIT 1
`

func (q *Queries) GetTableWhereName(ctx context.Context, name string) (CoreTable, error) {
	row := q.db.QueryRowContext(ctx, getTableWhereName, name)
	var i CoreTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Columns,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getTablesWhereUser = `-- name: GetTablesWhereUser :many

SELECT id, user_id, name, columns, created, updated FROM "public"."core_tables" WHERE user_id = $1
`

// --------------------- GET MULTIPLE CORE_TABLES OF CORE_USERS.user_id <== [CORE_TABLES] ---------------------
func (q *Queries) GetTablesWhereUser(ctx context.Context, userID int64) ([]CoreTable, error) {
	rows, err := q.db.QueryContext(ctx, getTablesWhereUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoreTable{}
	for rows.Next() {
		var i CoreTable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Columns,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTableColumns = `-- name: UpdateTableColumns :one

UPDATE "public"."core_tables" SET columns = $1 WHERE id = $2 RETURNING id, user_id, name, columns, created, updated
`

type UpdateTableColumnsParams struct {
	Columns string `json:"columns"`
	ID      int64  `json:"id"`
}

// -------------------------- UPDATE CORE_TABLES <-> CORE_TABLES --------------------------
func (q *Queries) UpdateTableColumns(ctx context.Context, arg UpdateTableColumnsParams) (CoreTable, error) {
	row := q.db.QueryRowContext(ctx, updateTableColumns, arg.Columns, arg.ID)
	var i CoreTable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Columns,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
