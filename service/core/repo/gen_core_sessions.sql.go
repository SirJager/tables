// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: gen_core_sessions.sql

package core_repo

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addSession = `-- name: AddSession :one

INSERT INTO "public"."core_sessions" 
(sid,uid,client_ip,user_agent,refresh_token,is_blocked,expires_at) 
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING sid, uid, client_ip, user_agent, refresh_token, is_blocked, expires_at, created_at
`

type AddSessionParams struct {
	Sid          uuid.UUID `json:"sid"`
	Uid          int64     `json:"uid"`
	ClientIp     string    `json:"client_ip"`
	UserAgent    string    `json:"user_agent"`
	RefreshToken string    `json:"refresh_token"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
}

// -------------------------- ADD ONE TO -> CORE_SESSIONS --------------------------
func (q *Queries) AddSession(ctx context.Context, arg AddSessionParams) (CoreSession, error) {
	row := q.db.QueryRowContext(ctx, addSession,
		arg.Sid,
		arg.Uid,
		arg.ClientIp,
		arg.UserAgent,
		arg.RefreshToken,
		arg.IsBlocked,
		arg.ExpiresAt,
	)
	var i CoreSession
	err := row.Scan(
		&i.Sid,
		&i.Uid,
		&i.ClientIp,
		&i.UserAgent,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one

SELECT sid, uid, client_ip, user_agent, refresh_token, is_blocked, expires_at, created_at FROM "public"."core_sessions" WHERE sid = $1 LIMIT 1
`

// -------------------------- GET ONE FROM <- CORE_SESSIONS --------------------------
func (q *Queries) GetSession(ctx context.Context, sid uuid.UUID) (CoreSession, error) {
	row := q.db.QueryRowContext(ctx, getSession, sid)
	var i CoreSession
	err := row.Scan(
		&i.Sid,
		&i.Uid,
		&i.ClientIp,
		&i.UserAgent,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
